{"version":3,"sources":["consts/cardTypes.ts","consts/predictors.ts","consts/forecastCodes.ts","components/EmptyCard.tsx","components/Draggable.tsx","components/BaseButton.tsx","app/hooks.ts","consts/cwbDisplayType.ts","types/Predict.ts","consts/stations.ts","types/Rainfall.ts","features/card/cardSlice.ts","utils/getLocalStorageJsonVal.ts","layout/Sidebar.tsx","components/Droppable.tsx","components/DashboardCard.tsx","consts/options.tsx","apis/cwb.ts","components/FormItem.tsx","components/LineChart.tsx","components/RawData.tsx","components/CardData.tsx","components/SelectField.tsx","components/PredictCard.tsx","components/RainfallCard.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["CardTypes","Predictors","ForecastCodes","EmptyCard","title","variant","className","classnames","Draggable","name","id","children","data","close","onClose","useDraggable","attributes","listeners","setNodeRef","transform","style","x","y","undefined","ref","onClick","BaseButton","props","useAppDispatch","useDispatch","useAppSelector","useSelector","CwbDisplayType","assertsPredict","val","Error","Stations","assertsRainfall","cardType","RAINFALL","initialState","dashboard","itemKey","localStorage","getItem","JSON","parse","getLocalStorageJsonVal","cardSlice","createSlice","reducers","addCardToDashboard","state","action","push","payload","removeCardFromDashboard","filter","updateRainfallCard","card","find","station","displayType","Number","updatePredictCard","predictor","forecastCode","location","saveDashboard","setItem","stringify","actions","Sidebar","useState","isShow","setIsShow","dispatch","type","PREDICT","window","alert","Droppable","useDroppable","isOver","minHeight","DashboardCard","form","chart","predictorOptions","label","value","MaxTemperature","MinTemperature","Humidity","cityOptions","Kaohsiung","Taina","Taichung","cwbDataTypeOptions","Line","RawData","locationOptions","city","stationOptions","Taipei","axios","create","baseURL","method","params","Authorization","process","FormItem","LineChart","datasets","labels","datasetName","length","CardData","SelectField","options","useField","field","setValue","useEffect","option","map","getPredictData","a","cwbApi","get","elementName","locationName","sort","resp","records","locations","weatherElement","time","startTime","elementValue","PredictCard","isEditable","Form","initialValues","enableReinitialize","onSubmit","console","log","predictData","values","handleSubmit","isSubmitting","getRainfallData","stationId","stationName","stationObsTime","stationObsTimes","dataDate","weatherElements","precipitation","RainfallCard","root","Dashboard","dashboardCards","onDragEnd","event","over","active","current","uuidv4","Object","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","cardReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c74d985c.chunk.js","sourcesContent":["export enum CardTypes {\n  PREDICT,\n  RAINFALL,\n}\n","export enum Predictors {\n  MaxTemperature = 'MaxT',\n  MinTemperature = 'MinT',\n  Humidity = 'RH',\n}\n","export enum ForecastCodes {\n  Taina = 'F-D0047-079',\n  Kaohsiung = 'F-D0047-067',\n  Taichung = 'F-D0047-075',\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  title: string;\n  variant: 'red' | 'yellow' | 'green' | 'pink';\n};\n\nconst EmptyCard: React.FC<Props> = ({ title, variant }) => {\n  const className = classnames(\n    'bg-red-500 text-white h-24 w-full flex justify-center items-center text-2xl',\n    {\n      'bg-red-500': variant === 'red',\n      'bg-yellow-500': variant === 'yellow',\n      'bg-green-500': variant === 'green',\n      'bg-pink-500': variant === 'pink',\n    }\n  );\n  return <div className={className}>{title}</div>;\n};\n\nexport default EmptyCard;\n","import React from 'react';\nimport { useDraggable } from '@dnd-kit/core';\n\ntype Props = {\n  id: string;\n  name?: string;\n  data?: Record<string, any>;\n  close?: boolean;\n  onClose?: () => void;\n};\n\nconst Draggable: React.FC<Props> = ({\n  name,\n  id,\n  children,\n  data,\n  close,\n  onClose,\n}) => {\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\n    id,\n    data,\n  });\n  const style = transform\n    ? {\n        transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\n      }\n    : undefined;\n\n  return (\n    <div className=\"w-full h-full\" ref={setNodeRef} style={style}>\n      <div className=\"p-4 flex justify-between bg-blue-300 space-x-6\">\n        <h4 className=\"text-lg text-gray-600\">{name}</h4>\n        <div className=\"flex items-center space-x-6\">\n          {close ? (\n            <button onClick={onClose} className=\"text-black\">\n              <i className=\"gg-close-o\" />\n            </button>\n          ) : (\n            <button\n              className=\"cursor-move text-black\"\n              {...listeners}\n              {...attributes}\n            >\n              <i className=\"gg-controller\" />\n            </button>\n          )}\n        </div>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport default Draggable;\n","import React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  variant: 'primary' | 'secondary';\n  className?: string;\n  [key: string]: any;\n};\n\nconst BaseButton: React.FC<Props> = ({\n  variant,\n  children,\n  className,\n  ...props\n}) => {\n  return (\n    <button\n      {...props}\n      className={classnames(\n        {\n          'bg-blue-400': variant === 'primary',\n          'bg-green-400': variant === 'secondary',\n        },\n        'rounded px-4 py-2 text-white',\n        className\n      )}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default BaseButton;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export enum CwbDisplayType {\n  Line,\n  RawData,\n}\n","import { Card } from './Card';\nimport { Predictors } from '../consts/predictors';\nimport { ForecastCodes } from '../consts/forecastCodes';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CardTypes } from '../consts/cardTypes';\nimport { CwbDisplayType } from '../consts/cwbDisplayType';\n\nexport type PredictData = {\n  startTime: string;\n  value: string;\n};\n\nexport type Predict = Card & {\n  forecastCode: ForecastCodes;\n  predictor: Predictors;\n  location: string;\n  data?: Array<PredictData>;\n};\n\nexport function assertsPredict(val: any): asserts val is Predict {\n  if (!(typeof val === 'object' && 'predictor' in val)) {\n    throw Error('Predict type error');\n  }\n}\n\nexport const defaultPredictState = (): Predict => ({\n  id: uuidv4(),\n  forecastCode: ForecastCodes.Kaohsiung,\n  predictor: Predictors.MinTemperature,\n  cardType: CardTypes.PREDICT,\n  displayType: CwbDisplayType.Line,\n  location: '鳳山區',\n});\n","export enum Stations {\n  Kaohsiung = '467440',\n  Taichung = '467490',\n  Taipei = '466920',\n}\n","import { Card } from './Card';\nimport { CwbDisplayType } from '../consts/cwbDisplayType';\nimport { Stations } from '../consts/stations';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CardTypes } from '../consts/cardTypes';\n\nexport type RainfallData = {\n  dataDate: string;\n  value: string;\n};\n\nexport type Rainfall = Card & {\n  station: Stations;\n  data?: Array<RainfallData>;\n};\n\nexport const defaultRainfallState = (): Rainfall => ({\n  id: uuidv4(),\n  displayType: CwbDisplayType.Line,\n  station: Stations.Kaohsiung,\n  cardType: CardTypes.RAINFALL,\n});\n\nexport function assertsRainfall(val: any): asserts val is Rainfall {\n  if (\n    !(\n      typeof val === 'object' &&\n      'station' in val &&\n      'cardType' in val &&\n      val.cardType === CardTypes.RAINFALL\n    )\n  ) {\n    throw Error('Rainfall type error');\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getLocalStorageJsonVal } from '../../utils/getLocalStorageJsonVal';\nimport { assertsPredict, Predict } from '../../types/Predict';\nimport { assertsRainfall, Rainfall } from '../../types/Rainfall';\n\nexport type DashboardCard = Predict | Rainfall;\nexport type DashboardCards = Array<DashboardCard>;\n\nexport interface CardState {\n  dashboard: DashboardCards;\n}\n\nconst initialState: CardState = {\n  dashboard: getLocalStorageJsonVal<DashboardCards>('dashboard') || [],\n};\n\ntype UpdateRainfallCardPayload = PayloadAction<\n  Pick<Rainfall, 'station' | 'displayType' | 'data' | 'id'>\n>;\n\ntype UpdatePredictCardPayload = PayloadAction<\n  Pick<\n    Predict,\n    'id' | 'predictor' | 'forecastCode' | 'displayType' | 'location' | 'data'\n  >\n>;\n\nexport const cardSlice = createSlice({\n  name: 'card',\n  initialState,\n  reducers: {\n    addCardToDashboard: (state, action: PayloadAction<DashboardCard>) => {\n      state.dashboard.push(action.payload);\n    },\n    removeCardFromDashboard: (state, action: PayloadAction<string>) => {\n      state.dashboard = state.dashboard.filter(\n        ({ id }) => id !== action.payload\n      );\n    },\n    updateRainfallCard: (state, action: UpdateRainfallCardPayload) => {\n      const card = state.dashboard.find(({ id }) => action.payload.id === id);\n      assertsRainfall(card);\n      const { station, displayType, data } = action.payload;\n      card.station = station;\n      card.displayType = Number(displayType);\n      if (data) {\n        card.data = [...data];\n      }\n    },\n    updatePredictCard: (state, action: UpdatePredictCardPayload) => {\n      const card = state.dashboard.find(({ id }) => action.payload.id === id);\n      assertsPredict(card);\n      const { predictor, forecastCode, displayType, location, data } =\n        action.payload;\n      card.predictor = predictor;\n      card.forecastCode = forecastCode;\n      card.displayType = Number(displayType);\n      card.location = location;\n      if (data) {\n        card.data = [...data];\n      }\n    },\n    saveDashboard: (state) => {\n      localStorage.setItem('dashboard', JSON.stringify(state.dashboard));\n    },\n  },\n});\n\nexport const {\n  addCardToDashboard,\n  removeCardFromDashboard,\n  updateRainfallCard,\n  updatePredictCard,\n  saveDashboard,\n} = cardSlice.actions;\nexport default cardSlice.reducer;\n","export function getLocalStorageJsonVal<T>(itemKey: string): undefined | T {\n  const val = localStorage.getItem(itemKey);\n  if (val === null) return;\n\n  return JSON.parse(val) as T;\n}\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport { CardTypes } from '../consts/cardTypes';\nimport EmptyCard from '../components/EmptyCard';\nimport Draggable from '../components/Draggable';\nimport BaseButton from '../components/BaseButton';\nimport { useAppDispatch } from '../app/hooks';\nimport { saveDashboard } from '../features/card/cardSlice';\n\ntype Props = {};\n\nconst Sidebar: React.FC<Props> = () => {\n  const [isShow, setIsShow] = useState<boolean>(true);\n  const dispatch = useAppDispatch();\n\n  const onSave = () => {\n    dispatch(saveDashboard());\n    window.alert('儲存成功');\n  };\n\n  return (\n    <aside className={classnames(isShow ? 'w-1/2' : 'w-0')}>\n      <div className={'h-full bg-blue-600 sticky top-0 min-h-screen'}>\n        <div className=\"flex w-full h-full relative\">\n          {isShow && (\n            <div\n              className={classnames(\n                'flex flex-col h-full justify-between text-gray-200 p-4 w-full'\n              )}\n            >\n              <div className=\"w-full h-full\">\n                <div className=\"flex items-center\">\n                  <h3 className=\"text-2xl\">Dashboard</h3>\n                </div>\n                <div className=\"space-y-2 mt-2.5 flex flex-col p-2\">\n                  <Draggable\n                    name=\"預測天氣\"\n                    id={'predict'}\n                    close={false}\n                    data={{ type: CardTypes.PREDICT }}\n                  >\n                    <EmptyCard title=\"預測天氣\" variant=\"green\" />\n                  </Draggable>\n                  <Draggable\n                    name=\"每日雨量記錄\"\n                    id={'rainfall'}\n                    close={false}\n                    data={{ type: CardTypes.RAINFALL }}\n                  >\n                    <EmptyCard title=\"每日雨量記錄\" variant=\"yellow\" />\n                  </Draggable>\n                </div>\n                <div className=\"flex justify-end mt-2.5\">\n                  <BaseButton onClick={() => onSave()} variant=\"secondary\">\n                    儲存\n                  </BaseButton>\n                </div>\n              </div>\n            </div>\n          )}\n          <button\n            onClick={() => setIsShow(!isShow)}\n            className=\"w-6 h-6 right-3.5 top-1/2 -mr-7 bg-indigo-400 absolute shadow rounded-full flex items-center justify-center cursor-pointer\"\n          >\n            <i\n              className={classnames(\n                isShow ? 'gg-chevron-left' : 'gg-chevron-right'\n              )}\n            />\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport { useDroppable } from '@dnd-kit/core';\nimport classnames from 'classnames';\n\ntype Props = {\n  id: string;\n};\n\nconst Droppable: React.FC<Props> = ({ id, children }) => {\n  const { isOver, setNodeRef } = useDroppable({ id });\n  return (\n    <div\n      ref={setNodeRef}\n      className={classnames('border w-full h-80 overflow-auto', {\n        'border-blue-400': isOver,\n      })}\n      style={{ minHeight: '500px' }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Droppable;\n","import React, { ReactElement } from 'react';\n\ntype Props = {\n  form: ReactElement;\n  chart: ReactElement;\n};\n\nconst DashboardCard: React.FC<Props> = ({ form, chart }) => {\n  return (\n    <div\n      className=\"flex items-center justify-between w-full overflow-hidden\"\n      style={{ minHeight: '500px' }}\n    >\n      <div className=\"flex flex-col w-full items-start justify-between rounded bg-white shadow\">\n        <div\n          className=\"w-full  h-full flex-grow dark:bg-gray-800\"\n          style={{ minHeight: '300px' }}\n        >\n          {chart}\n        </div>\n        <div className=\"w-full flex items-center max-h-16 h-full bg-gray-100 text-gray-600 p-2 text-sm space-y-1\">\n          {form}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardCard;\n","import { Options } from '../types/Options';\nimport { Predictors } from './predictors';\nimport { ForecastCodes } from './forecastCodes';\nimport { CwbDisplayType } from './cwbDisplayType';\nimport { Stations } from './stations';\n\nexport const predictorOptions: Options = [\n  { label: '最高溫度', value: Predictors.MaxTemperature },\n  { label: '最低溫度', value: Predictors.MinTemperature },\n  { label: '溼度', value: Predictors.Humidity },\n];\n\nexport const cityOptions: Options = [\n  { label: '高雄', value: ForecastCodes.Kaohsiung },\n  { label: '臺南', value: ForecastCodes.Taina },\n  { label: '臺中', value: ForecastCodes.Taichung },\n];\n\nexport const cwbDataTypeOptions: Options = [\n  { label: '曲線圖', value: CwbDisplayType.Line },\n  { label: '原始資料', value: CwbDisplayType.RawData },\n];\n\nexport const locationOptions = (city: ForecastCodes): Options => {\n  switch (city) {\n    case ForecastCodes.Kaohsiung:\n      return [\n        { label: '鳳山區', value: '鳳山區' },\n        { label: '橋頭區', value: '橋頭區' },\n      ];\n    case ForecastCodes.Taichung:\n      return [\n        { label: '北屯區', value: '北屯區' },\n        { label: '大安區', value: '大安區' },\n      ];\n    case ForecastCodes.Taina:\n      return [\n        { label: '安南區', value: '安南區' },\n        { label: '東山區', value: '東山區' },\n      ];\n    default:\n      throw Error('location option error');\n  }\n};\n\nexport const stationOptions: Options = [\n  { label: '高雄', value: Stations.Kaohsiung },\n  { label: '臺中', value: Stations.Taichung },\n  { label: '臺北', value: Stations.Taipei },\n];\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://opendata.cwb.gov.tw/api/v1/rest/datastore',\n  method: 'get',\n  params: {\n    Authorization: process.env.REACT_APP_CWB_TOKEN,\n  },\n});\n","import React from 'react';\n\nconst FormItem: React.FC = ({ children }) => {\n  return <div className=\"flex items-center space-x-1\">{children}</div>;\n};\n\nexport default FormItem;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\ntype Props = {\n  datasets: Array<number>;\n  labels: Array<string>;\n  datasetName: string;\n};\n\nconst LineChart: React.FC<Props> = ({ datasets, labels, datasetName }) => {\n  return (\n    <div className=\"w-full max-w-2xl mx-auto relative h-full\">\n      {datasets.length ? (\n        <Line\n          data={{ labels, datasets: [{ data: datasets, label: datasetName }] }}\n        />\n      ) : (\n        'no data'\n      )}\n    </div>\n  );\n};\n\nexport default LineChart;\n","import React from 'react';\n\ntype Props = {\n  data: any;\n};\n\nconst RawData: React.FC<Props> = ({ data }) => {\n  return <pre>{data}</pre>;\n};\n\nexport default RawData;\n","import React from 'react';\nimport { CwbDisplayType } from '../consts/cwbDisplayType';\nimport LineChart from './LineChart';\nimport RawData from './RawData';\n\ntype Props = {\n  datasets?: Array<number>;\n  labels?: Array<string>;\n  datasetName?: string;\n  data?: string;\n  displayType: CwbDisplayType;\n};\n\nconst CardData: React.FC<Props> = ({\n  displayType,\n  data,\n  datasets,\n  datasetName,\n  labels,\n}) => {\n  if (displayType === CwbDisplayType.Line && datasets && labels && datasetName)\n    return (\n      <LineChart\n        datasets={datasets}\n        labels={labels}\n        datasetName={datasetName}\n      />\n    );\n  if (displayType === CwbDisplayType.RawData && data)\n    return <RawData data={data} />;\n  return <></>;\n};\n\nexport default CardData;\n","import React, { useEffect } from 'react';\nimport { Options } from '../types/Options';\nimport { useField } from 'formik';\n\ntype Props = {\n  name: string;\n  options: Options;\n  value: any;\n};\n\nconst SelectField: React.FC<Props> = ({ value, name, options }) => {\n  const [field, , { setValue }] = useField({ name, value });\n\n  useEffect(() => {\n    if (!options.find((option) => option.value === value)) {\n      setValue(options[0].value);\n    }\n  }, [options, setValue, value]);\n\n  return (\n    <select {...field} className=\"px-4 py-2\">\n      {options.map(({ label, value }) => (\n        <option key={value} value={value}>\n          {label}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default SelectField;\n","import React, { ReactElement } from 'react';\nimport DashboardCard from './DashboardCard';\nimport {\n  cwbDataTypeOptions,\n  cityOptions,\n  predictorOptions,\n  locationOptions,\n} from '../consts/options';\nimport { Predictors } from '../consts/predictors';\nimport { ForecastCodes } from '../consts/forecastCodes';\nimport Draggable from './Draggable';\nimport { CardTypes } from '../consts/cardTypes';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport {\n  removeCardFromDashboard,\n  updatePredictCard,\n} from '../features/card/cardSlice';\nimport EmptyCard from './EmptyCard';\nimport cwbApi from '../apis/cwb';\nimport BaseButton from './BaseButton';\nimport { PredictApiResponse } from '../types/PredictApiResponse';\nimport FormItem from './FormItem';\nimport { RootState } from '../app/store';\nimport { assertsPredict, PredictData } from '../types/Predict';\nimport CardData from './CardData';\nimport SelectField from './SelectField';\nimport { Formik } from 'formik';\n\ntype Props = {\n  isEditable?: boolean;\n  id: string;\n  close?: boolean;\n};\n\ntype PredictApiInput = {\n  city: ForecastCodes;\n  predictor: Predictors;\n  location: string;\n};\n\nconst PredictCard: React.FC<Props> = ({\n  isEditable = true,\n  id,\n  close = false,\n}) => {\n  const card = useAppSelector((state: RootState) =>\n    state.card.dashboard.find((card) => card.id === id)\n  );\n  const dispatch = useAppDispatch();\n  assertsPredict(card);\n\n  const Form = (): ReactElement => (\n    <div className=\"flex justify-between\">\n      <Formik\n        initialValues={{\n          predictor: card.predictor,\n          forecastCode: card.forecastCode,\n          location: card.location,\n          displayType: card.displayType,\n        }}\n        enableReinitialize={true}\n        onSubmit={async ({\n          displayType,\n          predictor,\n          forecastCode,\n          location,\n        }) => {\n          console.log(displayType, predictor, forecastCode, location);\n          const predictData = await getPredictData({\n            city: forecastCode,\n            predictor: predictor,\n            location: location,\n          });\n          dispatch(\n            updatePredictCard({\n              id,\n              predictor,\n              forecastCode,\n              displayType,\n              location,\n              data: predictData,\n            })\n          );\n        }}\n      >\n        {({ values, handleSubmit, isSubmitting }) => (\n          <form onSubmit={handleSubmit} className=\"flex space-x-4\">\n            <FormItem>\n              <span>觀測站：</span>\n              <SelectField\n                name=\"predictor\"\n                options={predictorOptions}\n                value={values.predictor}\n              />\n            </FormItem>\n            <FormItem>\n              <span>縣市位置：</span>\n              <SelectField\n                name=\"forecastCode\"\n                options={cityOptions}\n                value={values.forecastCode}\n              />\n            </FormItem>\n            <FormItem>\n              <span>鄉鎮位置：</span>\n              <SelectField\n                name=\"location\"\n                options={locationOptions(values.forecastCode)}\n                value={values.location}\n              />\n            </FormItem>\n            <FormItem>\n              <span>顯示方式：</span>\n              <SelectField\n                name=\"displayType\"\n                options={cwbDataTypeOptions}\n                value={values.displayType}\n              />\n            </FormItem>\n            <BaseButton\n              type=\"submit\"\n              variant={isSubmitting ? 'secondary' : 'primary'}\n            >\n              {isSubmitting ? 'Loading' : '確認'}\n            </BaseButton>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n\n  return (\n    <Draggable\n      onClose={() => dispatch(removeCardFromDashboard(id))}\n      close={close}\n      data={{ type: CardTypes.PREDICT }}\n      id={id}\n      name=\"預測天氣卡片\"\n    >\n      {isEditable ? (\n        <DashboardCard\n          form={<Form />}\n          chart={\n            <CardData\n              displayType={card.displayType}\n              data={JSON.stringify(card.data, null, 2)}\n              datasetName={card.location}\n              datasets={card.data?.map(({ value }) => Number(value))}\n              labels={card.data?.map(({ startTime }) => startTime)}\n            />\n          }\n        />\n      ) : (\n        <EmptyCard title=\"預測天氣卡片\" variant=\"green\" />\n      )}\n    </Draggable>\n  );\n};\n\nasync function getPredictData({\n  city,\n  predictor,\n  location,\n}: PredictApiInput): Promise<Array<PredictData>> {\n  try {\n    const resp = await cwbApi.get<PredictApiResponse>(`/${city}`, {\n      params: { elementName: predictor, locationName: location, sort: 'time' },\n    });\n    return resp.data.records.locations[0].location[0].weatherElement[0].time.map(\n      ({ startTime, elementValue }) => ({\n        startTime,\n        value: elementValue[0].value,\n      })\n    );\n  } catch (e) {\n    throw e;\n  }\n}\n\nexport default PredictCard;\n","import React, { ReactElement } from 'react';\nimport Draggable from './Draggable';\nimport { CardTypes } from '../consts/cardTypes';\nimport DashboardCard from './DashboardCard';\nimport FormItem from './FormItem';\nimport { cwbDataTypeOptions, stationOptions } from '../consts/options';\nimport BaseButton from './BaseButton';\nimport { Stations } from '../consts/stations';\nimport cwbApi from '../apis/cwb';\nimport { RainfallApiResponse } from '../types/RainfallApiResponse';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport { RootState } from '../app/store';\nimport { RainfallData } from '../types/Rainfall';\nimport {\n  removeCardFromDashboard,\n  updateRainfallCard,\n} from '../features/card/cardSlice';\nimport CardData from './CardData';\nimport { assertsRainfall } from '../types/Rainfall';\nimport { Formik } from 'formik';\nimport SelectField from './SelectField';\n\ntype Props = { isEditable?: boolean; close?: boolean; id: string };\n\nexport const RainfallCard: React.FC<Props> = ({ id, close = false }) => {\n  const card = useAppSelector((root: RootState) =>\n    root.card.dashboard.find((card) => card.id === id)\n  );\n  const dispatch = useAppDispatch();\n  assertsRainfall(card);\n\n  const Form = (): ReactElement => (\n    <div className=\"flex justify-between\">\n      <Formik\n        initialValues={{\n          station: card.station,\n          displayType: card.displayType,\n        }}\n        enableReinitialize={true}\n        onSubmit={async ({ station, displayType }) => {\n          const { data } = await getRainfallData(station);\n          dispatch(updateRainfallCard({ id, station, displayType, data }));\n        }}\n      >\n        {({ values, handleSubmit, isSubmitting }) => (\n          <form onSubmit={handleSubmit} className=\"flex space-x-4\">\n            <FormItem>\n              <span>觀測站：</span>\n              <SelectField\n                name=\"station\"\n                options={stationOptions}\n                value={values.station}\n              />\n            </FormItem>\n            <FormItem>\n              <span>顯示方式：</span>\n              <SelectField\n                name=\"displayType\"\n                options={cwbDataTypeOptions}\n                value={values.displayType}\n              />\n            </FormItem>\n            <BaseButton\n              type=\"submit\"\n              variant={isSubmitting ? 'secondary' : 'primary'}\n            >\n              {isSubmitting ? 'Loading' : '確認'}\n            </BaseButton>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n\n  const onClose = () => {\n    dispatch(removeCardFromDashboard(id));\n  };\n\n  return (\n    <Draggable\n      name=\"每日雨量記錄\"\n      id={id}\n      close={close}\n      data={{ type: CardTypes.RAINFALL }}\n      onClose={onClose}\n    >\n      <DashboardCard\n        form={<Form />}\n        chart={\n          <CardData\n            displayType={card.displayType}\n            data={JSON.stringify(card.data, null, 2)}\n            datasets={card.data?.map(({ value }) => Number(value))}\n            labels={card.data?.map(({ dataDate }) => dataDate)}\n            datasetName={\n              stationOptions.find(({ value }) => value === card.station)?.label\n            }\n          />\n        }\n      />\n    </Draggable>\n  );\n};\n\nasync function getRainfallData(\n  stationId: Stations\n): Promise<{ data: Array<RainfallData>; station: string }> {\n  try {\n    const resp = await cwbApi.get<RainfallApiResponse>('/C-B0025-001', {\n      params: { stationId },\n    });\n    const {\n      station: { stationName },\n      stationObsTimes: { stationObsTime },\n    } = resp.data.records.location[0];\n    return {\n      data: stationObsTime.map(({ dataDate, weatherElements }) => ({\n        dataDate,\n        value: weatherElements.precipitation,\n      })),\n      station: stationName,\n    };\n  } catch (e) {\n    throw e;\n  }\n}\n\nexport default RainfallCard;\n","import React from 'react';\nimport Sidebar from '../layout/Sidebar';\nimport { DndContext, DragEndEvent } from '@dnd-kit/core';\nimport Droppable from './Droppable';\nimport PredictCard from './PredictCard';\nimport { RootState } from '../app/store';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport { addCardToDashboard } from '../features/card/cardSlice';\nimport { CardTypes } from '../consts/cardTypes';\nimport RainfallCard from './RainfallCard';\nimport { defaultRainfallState } from '../types/Rainfall';\nimport { defaultPredictState } from '../types/Predict';\n\nconst Dashboard: React.FC = () => {\n  const dashboardCards = useAppSelector(\n    (state: RootState) => state.card.dashboard\n  );\n  const dispatch = useAppDispatch();\n  return (\n    <DndContext onDragEnd={onDragEnd}>\n      <div className=\"flex flex-no-wrap\">\n        <Sidebar />\n        <div className=\"w-full container mx-auto p-4 space-y-4 flex flex-wrap flex-col\">\n          {Object.values(dashboardCards).map(({ id, cardType }) => (\n            <Droppable key={id} id={id}>\n              {cardType === CardTypes.PREDICT && (\n                <PredictCard close={true} id={id} />\n              )}\n              {cardType === CardTypes.RAINFALL && (\n                <RainfallCard close={true} id={id} />\n              )}\n            </Droppable>\n          ))}\n          <Droppable id=\"empty\" />\n        </div>\n      </div>\n    </DndContext>\n  );\n\n  function onDragEnd(event: DragEndEvent) {\n    const { over, active } = event;\n    if (!over) return;\n    const cardType = active.data.current?.type;\n\n    switch (cardType) {\n      case CardTypes.PREDICT:\n        dispatch(addCardToDashboard(defaultPredictState()));\n        break;\n      case CardTypes.RAINFALL:\n        dispatch(addCardToDashboard(defaultRainfallState()));\n        break;\n    }\n  }\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport cardReducer from '../features/card/cardSlice';\n\nexport const store = configureStore({\n  reducer: {\n    card: cardReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}